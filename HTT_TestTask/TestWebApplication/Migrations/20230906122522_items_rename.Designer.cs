// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestWebApplication.Data;

#nullable disable

namespace TestWebApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230906122522_items_rename")]
    partial class items_rename
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestWebApplication.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Напитки"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Телефоны"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Еда"
                        });
                });

            modelBuilder.Entity("TestWebApplication.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Name = "Молоко",
                            Price = 68m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Name = "Fanta",
                            Price = 77m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Name = "Sprite",
                            Price = 81m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Name = "Вода",
                            Price = 22m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Name = "iPhone X",
                            Price = 110450m
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Name = "Samsung 11",
                            Price = 108600m
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            Name = "Redmi 9 ",
                            Price = 38201m
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3,
                            Name = "Свинина",
                            Price = 385m
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3,
                            Name = "Курица",
                            Price = 244m
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            Name = "Хлеб",
                            Price = 52m
                        });
                });

            modelBuilder.Entity("TestWebApplication.Models.Product", b =>
                {
                    b.HasOne("TestWebApplication.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TestWebApplication.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
